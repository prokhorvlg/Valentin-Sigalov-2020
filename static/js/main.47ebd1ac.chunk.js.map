{"version":3,"sources":["containers/Splash/Splash.js","components/Sections/SectionAboutMe.js","containers/Section/Section.js","containers/Full/Full.js","utils/serviceWorker.js","index.js"],"names":["Splash","className","src","href","SectionAboutMe","Component","Section","title","this","props","renderSwitch","Full","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNAmDeA,MA/Cf,WACE,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,0BACb,yBAAKC,IAAI,MAEX,yBAAKD,UAAU,eACb,iDAEF,yBAAKA,UAAU,kBACb,0DAGJ,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,4BACf,yBAAKA,UAAU,iCAGnB,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,sBACf,yBAAKA,UAAU,oBACb,4BACE,4BACE,uBAAGE,KAAK,KAAR,WAEF,4BACE,uBAAGA,KAAK,KAAR,cAKR,yBAAKF,UAAU,sBACb,yBAAKA,UAAU,mCAIrB,yBAAKA,UAAU,wB,4BC9BRG,E,uKAVX,OACE,kC,GAJuBC,aCmCdC,E,uKA5BX,IAAMC,EAAQC,KAAKC,MAAMF,MAETC,KAAKE,aAAaH,GAElC,OACE,yBAAKN,UAAU,c,mCAMNM,GACX,OAAQA,GACN,IAAK,UAEL,IAAK,SAEL,IAAK,aAEL,IAAK,WAEL,IAAK,UACH,OAAO,kBAAC,EAAD,W,GA1BOF,aC+BPM,MAnBf,WAOE,OACE,yBAAKV,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASM,MATG,YAUZ,kBAAC,EAAD,CAASA,MATE,WAUX,kBAAC,EAAD,CAASA,MATM,eAUf,kBAAC,EAAD,CAASA,MATI,aAUb,kBAAC,EAAD,CAASA,MATG,cCVEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.47ebd1ac.chunk.js","sourcesContent":["import React from 'react';\n\n// Splash container\n// This is the full-page view that the user sees when the first open the page, which turns into a sidebar upon scroll.\nfunction Splash() {\n  return (\n    <div className=\"splash\">\n      <div className=\"splash-container\">\n        <div className=\"splash-upper\">\n          <div className=\"splash-left-profile\">\n            <div className=\"splash-left-upper\">\n              <div className=\"splash-profile-picture\">\n                <img src=\"\" />\n              </div>\n              <div className=\"splash-name\">\n                <h1>Valentin Sigalov</h1>\n              </div>\n              <div className=\"splash-tagline\">\n                <h2>Full-Stack Web Developer</h2>\n              </div>\n            </div>\n            <div className=\"splash-left-lower\">\n              <div className=\"splash-lower-scrollicon\"></div>\n              <div className=\"splash-lower-left-terminal\"></div>\n            </div>\n          </div>\n          <div className=\"splash-right-menu\">\n            <div className=\"splash-right-upper\">\n              <div className=\"splash-right-para\"></div>\n              <nav className=\"splash-right-nav\">\n                <ul>\n                  <li>\n                    <a href=\"#\">Anchor</a>\n                  </li>\n                  <li>\n                    <a href=\"#\">Anchor</a>\n                  </li>\n                </ul>\n              </nav>\n            </div>\n            <div className=\"splash-right-lower\">\n              <div className=\"splash-lower-right-terminal\"></div>\n            </div>\n          </div>\n        </div>\n        <div className=\"splash-lower-bar\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Splash;\n","import React, { Component } from 'react';\r\n\r\nclass SectionAboutMe extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      {/* SECTION BANNER Component */}\r\n      {/* SECTION Contents... */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default SectionAboutMe;","import React, { Component } from 'react';\nimport SectionAboutMe from '../../components/Sections/SectionAboutMe.js';\n\n// Section container\n// This is the template for an individual section within.\nclass Section extends Component {\n\n  render() {\n    // Grab title from properties.\n    const title = this.props.title;\n    // Based on title, display a different set of content.\n    const content = this.renderSwitch(title);\n\n    return (\n      <div className=\"section\">\n        {/* SECTION CONTENT Component */}\n      </div>\n    );\n  }\n\n  renderSwitch(title) {\n    switch (title) {\n      case 'aboutme':\n        return <SectionAboutMe />;\n      case 'skills':\n        return <SectionAboutMe />;\n      case 'experience':\n        return <SectionAboutMe />;\n      case 'projects':\n        return <SectionAboutMe />;\n      case 'contact':\n        return <SectionAboutMe />;\n    }\n  }\n\n}\n\nexport default Section;","import React, { Component } from 'react';\n\n// Full.js serves as the container for the entire app.\n\n// STYLESHEET\nimport '../../styles/compiler.scss';\n\n// CONTAINERS\nimport Splash from '../Splash/Splash.js';\nimport Section from '../Section/Section.js';\n\n// COMPONENTS\n\n// IMAGES\n\n//import logo from './logo.svg';\n\nfunction Full() {\n  const aboutme = \"aboutme\";\n  const skills = \"skills\";\n  const experience = \"experience\";\n  const projects = \"projects\";\n  const contact = \"contact\";\n\n  return (\n    <div className=\"full\">\n      <Splash />\n      <Section title={aboutme}  />\n      <Section title={skills} />\n      <Section title={experience} />\n      <Section title={projects} />\n      <Section title={contact} />\n    </div>\n  );\n}\n\nexport default Full;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Full from './containers/Full/Full.js';\nimport * as serviceWorker from './utils/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Full />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}